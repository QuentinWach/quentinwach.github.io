<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-16T21:04:52+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Q. Wach</title><subtitle></subtitle><entry><title type="html">Introduction to Computational Fluid Dynamics</title><link href="http://localhost:4000/science-engineering/2024/12/03/fluids-intro.html" rel="alternate" type="text/html" title="Introduction to Computational Fluid Dynamics" /><published>2024-12-03T20:38:24+01:00</published><updated>2024-12-03T20:38:24+01:00</updated><id>http://localhost:4000/science-engineering/2024/12/03/fluids-intro</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/12/03/fluids-intro.html"><![CDATA[<!--
# Jon Stam's Real-Time Fluid Simulator

<img align="right" width="40%" margin-left="20px" src="1st_test_smoke.png">
-->

<p>We will look at a 2D simulation here first using a grid-approach or <em>“Eulerian”</em> approach. Moving to 3D is quite trivial. It is <em>Eulerian</em> because we use a grid rather than points for the computations. Below, we will be mainly following the work of Matthias Müller <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> with added details and insights from various other sources.</p>

<p>We assume that:</p>
<ol>
  <li>Water is an <a href="https://en.wikipedia.org/wiki/Incompressible_flow">incompressable fluid</a>.</li>
  <li>It has no <a href="https://en.wikipedia.org/wiki/Viscosity">viscosity</a> (even though adding it would be rather easy).</li>
</ol>

<p>The steps we have to take to create a fast and more or less realist looking fluid simulation as typical for games are simple:</p>
<ol>
  <li>Initialize the densities within the grid as well as where the obstacles are. (More on that in a bit.)</li>
  <li>Add/apply forces like gravity, wind, or random turbulances.</li>
  <li>“Project” the grid. In other words, enforce that the density in every cell has the correct density such that the fluid is not compressed.</li>
  <li>“Advect” the velocities of the fluids.</li>
</ol>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="fig1.svg" alt="Fig1" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><strong>Figure 1.</strong> <em>Outline of the fluid dynamics algorithm. We first initializse the densities and objects within the grid, then enter the simulation loop where we apply forces at each step, diffuse the fluid, the “project” in order to enforce compressibility, and lastely “advect” in order to redirect the velocities of the fluid.</em></td>
    </tr>
  </tbody>
</table>

<p>Our velocity vector</p>

\[\vec{\text{v} } =
        \begin{pmatrix}
            u \\
            v
        \end{pmatrix}\]

<p>are saved not within the centers of the cells (<em>“collocated”</em> grid) but rather at the boundaries creating a so called <em>“staggered”</em> grid.</p>

<p>The indices for the grid positions are notated as \(i, j\) .</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="fig2.svg" alt="Fig2" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><strong>Figure 2.</strong> <em>The staggered grid within which all the fluid dynamics are computed.</em></td>
    </tr>
  </tbody>
</table>

<h3 id="velocity-update">Velocity Update</h3>
<p>Now, for all \(i,j\) we update the velocity</p>

\[v_x^{i,j} \leftarrow v_x^{i,j} + \Delta t \cdot g\]

<p>with the gravity \(g: -9.81\;\) m/s for time-steps \(\Delta t\) of e.g. \(\frac{1}{30}\;\) s.</p>

<blockquote>
  <p><strong>Question</strong>: This is the simplest form of integration called the <a href="https://en.wikipedia.org/wiki/Euler_method">Euler method</a>. If you have ever worked with chaotic systems, you’ll may know that this can lead to large errors quickly! So why does this work here? Or does it?</p>
</blockquote>

<h3 id="divergence-total-outflow">Divergence (Total Outflow)</h3>
<p>We calculate the total outflow of a cell as</p>

\[d \leftarrow v_x^{i,j+1}-v_x^{i,j} + v_y^{i+1,j} - v_y^{i,j}.\]

<p>If \(d\) is positive, we have too much outflow. If it is negative, we have too much inflow. Only if \(d = 0\) is our fluid as incompressible as we desire!</p>

<p>Thus we must force incompressibility!</p>

<h3 id="forcing-incompressibility">Forcing Incompressibility</h3>
<p>First, we compute the divergence.
We can then handle obstacles or walls by fixing those velocity vectors. So for static object, that point of the border would be zero. But if it is moving this will of course impact the velocity and we can simulate how the fluid is being pushed around!</p>

<h3 id="general-case">General Case</h3>
<p>It is useful to define the scalar value \(s^{i,j}\) for each cell, where objects are zero and fluids 1. We update it as</p>

\[s \leftarrow  s^{i+1. j} + s^{i-1, j} + s^{i,j+1} + s^{i,j-1}\]

<p>and</p>

\[v_x^{i,j} \leftarrow v_x^{i,j} + d \cdot s^{i-1,j}/s \\\\
v_x^{i+1,j} \leftarrow v_x^{i+1,j} + d \cdot s^{i+1,j}/s \\\\
v_y^{i,j} \leftarrow v_y^{i,j} + d \cdot s^{i,j+1}/s \\\\
v_y^{i,j+1} \leftarrow v_y^{i,j+1} + d \cdot s^{i,j+1}/s.\]

<p>Why?</p>

<h3 id="solving-the-grid">Solving the Grid</h3>
<p>Naturally, we want to solve the whole grid. One, and possibly the simplest method here is to use the <a href="https://en.wikipedia.org/wiki/Gauss%E2%80%93Seidel_method">Gauss-Seidel method</a>:</p>

<p>For \(n\) iterations and for all \(i,j\) , we compute the general case.</p>

<p>An issue here is that we access boundary cells outside of the grid! To resolve this problem, we can add border cells and set \(s^{i,j} = 0\) for them to make them walls. Alternatively, we could copy the neighbor cells that are inside the grid.</p>

<h3 id="measuring-pressure">Measuring Pressure</h3>
<p>We can also store a physical pressure value \(p^{i,j}\) inside each cell!</p>

<p>For the \(n\) iterations and all \(i,j\) , we can then additionally calculate it as</p>

\[p^{i,j} \leftarrow p^{i,j} + \frac{d}{s}\cdot \frac{\rho \\; h}{\Delta t},\]

<p>where \(\rho\) is the density of the fluid and \(h\) is the grid spacing.</p>

<p>While not necessary for the simulation, it provides us with some interesting information without much additional effort!</p>

<h3 id="over-relaxation">Over-Relaxation</h3>
<p>While the Guass-Seidel method is very simple to implement, it needs more iterations than global methods. Here comes <em>“over-relaxation”</em> into play.</p>

<p>We multiply the divergence by a scalar \(1 \leq o \leq 2\)</p>

\[d \leftarrow o\cdot(v_x^{i+1, j} - v_x^{i,j} + v_y^{i,j+1} - v_y^{i,j})\]

<p>e.g. \(o=1.9\) . Doing so increases the convergence of the method dramatically! It is very possible that the simulation will collapse and lead to an physically implausible result if we do not over-relax.</p>

<p>And the pressure values still remain correct!</p>

<h3 id="semi-lagrangian-advection">Semi-Lagrangian <a href="https://en.wikipedia.org/wiki/Advection">Advection</a></h3>
<p>This section is going to be a bit weird and possibly difficult to understand.
The core question is simply: <em>“How do the <strong>velocities</strong> stream through the fluid?”</em></p>

<p>In the real world, fluids are made of particles. We don’t have static grids like we assume here. It is merely a useful abstraction. But we still need to move the velocity values in the grid just like the velocity state is carried by the particles in the real world since energy must be conserved!</p>

<p>While we don’t actually simulate particles, this idea is why we call it a semi-Lagrangian approach. (Remember! <em>“Lagrangian”</em> rather than <em>“Eulerian”</em> because now we consider particles rather than a grid.)</p>

<p>Given a velocity within a grid \( \vec{v}(t) \) at time \( t \) , we want to know where the velocity came from, how it changed, hence \( \vec{v}(t+\Delta t) \leftarrow \vec{v}(t) \). For that, we compute \( \vec{v} \) at the position \( \vec{x} \) through simple differentiation i.e. computing</p>

\[\vec{v}(t) = \vec{x}(t) - \vec{x}(t-\Delta t).\]

<p>Knowing that local change dependent on the position \( \vec{v}(x) \) , we can approximate the previous position of the velocity as</p>

\[\vec{x} = \vec{x} - \Delta t \cdot \vec{v}(x)\]

<p>(Note that my notation here is everything else but consistent or precise but I hope you get the idea.)</p>

<p>This is another linear approximation. As the result, the viscosity of the fluid is increased. One possible solution to this issue is <a href=""><em>“vorticity confinement”</em></a>.</p>

<p>To get the total 2D velocity within the grid cell we can simply take the average of the surrounding velocities:</p>

\[v^{i,j} = (v^{i-1,j} + v^{i,j-1} +v^{i+1,j} +v^{i,j+1})/4.\]

<p>And to calculate the velocity at any arbitrary position within the grid, hence, to interpolate, we can calculate a <strong>weighted average</strong> of the surrounding values</p>

\[\bar{v} = w^{00} \cdot w^{10} \cdot v^{i,j} + w^{01} \cdot w^{10} \cdot v^{i+1,j} \\\\
    \qquad \qquad + w^{10} \cdot w^{11} \cdot v^{i,j+1} + w^{11} \cdot w^{11} \cdot v^{i+1,j+1}\]

<p>where \( w^{00} = 1 - x/h \) , \( w^{01} = x/h \) , \( w^{10} = 1 - y/h \) , and \( w^{11} = 1 - y/h \) for the height \( y \) within the points and the width \( x \) within the points.</p>

<h3 id="smoke-advection--streamlines">Smoke Advection &amp; Streamlines</h3>
<p>We can store the density value at the center of each cell and <em>“advect”</em> it just like the velocity components before. Quite useful for simulating smoke.</p>

<p>Calculating streamlines is rather straightforward as well. We start at the position \(x_1\) and step forward with the step-size \(s\) to get \(x_2 \leftarrow s \cdot v(x_1) \) and so on for \(n\) steps, each time sampling the velocity \(v\) at the corresponding position.</p>

<h2 id="references--notes">References &amp; Notes</h2>
<h3 id="matthias-müllers-and-related-work">Matthias Müller’s and Related Work</h3>

<h3 id="jos-stams-famous-real-time-fluid-dynamics-for-games-work">Jos Stam’s Famous “Real-Time Fluid Dynamics for Games” Work</h3>

<h2 id="other-research-publications">Other Research Publications</h2>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://matthias-research.github.io/pages/tenMinutePhysics/17-fluidSim.pdf">Matthias Müller, <em>“How to write an Eulerian fluid simulator with 200 lines of code.”</em>, YouTube: Ten Minute Physics, 2022: <em>https://www.youtube.com/watch?v=iKAVRgIrUOU</em> (Accessed: June 28, 2024)</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://matthias-research.github.io/pages/tenMinutePhysics/17-fluidSim.pdf">Matthias Müller, <em>“Notes On Eulerian Fluid Simulations.”</em>, GitHub, 2022: <em>https://matthias-research.github.io/pages/tenMinutePhysics/17-fluidSim.pdf</em> (Accessed: June 28, 2024)</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="physics" /><category term="software" /><summary type="html"><![CDATA[Where we will discuss the Navier-Stokes equations and then break down the problem with the presence of solid objects implementing a simple real-time solver in Python.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/ink_fluid_comp.gif" /><media:content medium="image" url="http://localhost:4000/images/ink_fluid_comp.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">File Management in Tauri 2.0 with Rust</title><link href="http://localhost:4000/blog/2024/11/26/files-in-tauri-v2.html" rel="alternate" type="text/html" title="File Management in Tauri 2.0 with Rust" /><published>2024-11-26T20:38:24+01:00</published><updated>2024-11-26T20:38:24+01:00</updated><id>http://localhost:4000/blog/2024/11/26/files-in-tauri-v2</id><content type="html" xml:base="http://localhost:4000/blog/2024/11/26/files-in-tauri-v2.html"><![CDATA[<p>I recently posted on Reddit that <a href="https://www.reddit.com/r/tauri/comments/1h4nee8/tauri_20_is_a_nightmare_to_learn/">“Tauri 2.0 Is a Nightmare to Learn”</a> using my alternative account and found a lot of resonance with the community. Tauri 2.0<sup id="fnref:Tauri2" role="doc-noteref"><a href="#fn:Tauri2" class="footnote" rel="footnote">1</a></sup> (v2) is a big step forward for the framework and a big step forward for Rust as well. But if you are just getting started with it, you might find that the documentation is not quite as thorough as you would like it to be, and the safety features are overly complicated, and none of the current AI’s have learned yet how to use v2 making them useless if not a hindrance!</p>

<p>When you are just getting started, opening, modifying, and saving files, for example,can seem quite a bit tricky. If you choose to use Rust rather than using the API provided by Tauri and struggle to get it working, this post is for you. Let’s make a simple text file editor (which I lovingly called <em>fedit</em> short for <em>“fucking edit!”</em> in my angry desperation to get this working) like this:</p>

<p><img src="/images/tauri_editor.png" alt="" /></p>

<h2 id="setup">Setup</h2>
<p>Clone the repository and navigate into the project folder:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/QuentinWach/fedit
<span class="nb">cd </span>fedit
</code></pre></div></div>
<p>Then run the app with:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run tauri dev
</code></pre></div></div>

<p>You should see a window popping up just like in the image above. You can open a text file by clicking on the <em>Open</em> button and then selecting a file using the system dialog window that will pop up as well as save the file by clicking on the <em>Save</em> button which will open another dialog window asking you to specify the file name and directory. Modifications can be done in the text editor window.</p>

<h2 id="user-interface--components">User Interface &amp; Components</h2>
<p>The UI here is created with React components<sup id="fnref:React" role="doc-noteref"><a href="#fn:React" class="footnote" rel="footnote">2</a></sup> you’ll find in the <code class="language-plaintext highlighter-rouge">components/</code> folder. The Editor component returns the following:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"editor-container"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"button-container"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleOpen</span><span class="si">}</span><span class="p">&gt;</span>Open<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleSave</span><span class="si">}</span><span class="p">&gt;</span>Save<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">textarea</span>
        <span class="na">className</span><span class="p">=</span><span class="s">"editor-textarea"</span>
        <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">content</span><span class="si">}</span>
        <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">handleContentChange</span><span class="si">}</span>
        <span class="na">placeholder</span><span class="p">=</span><span class="s">"Type your text here..."</span>
    <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>
<p>You can see, it really is just the two mentioned buttons and a textarea below. But when clicking the buttons, the <code class="language-plaintext highlighter-rouge">handleOpen</code> and <code class="language-plaintext highlighter-rouge">handleSave</code> functions are called. Let’s look at <code class="language-plaintext highlighter-rouge">handleOpen</code> as an example to understand how this works:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">handleOpen</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="c1">// Open a file selection dialog</span>
        <span class="kd">const</span> <span class="nx">selected</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">open</span><span class="p">({</span>
            <span class="na">multiple</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">filters</span><span class="p">:</span> <span class="p">[{</span>
                <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Text</span><span class="dl">'</span><span class="p">,</span>
                <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">md</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">txt</span><span class="dl">'</span><span class="p">]</span>
            <span class="p">}]</span>
        <span class="p">});</span>
        
        <span class="k">if </span><span class="p">(</span><span class="nx">selected</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Read the file content using our Rust command</span>
            <span class="kd">const</span> <span class="nx">fileContent</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">invoke</span><span class="p">(</span><span class="dl">'</span><span class="s1">open_file</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
                <span class="na">path</span><span class="p">:</span> <span class="nx">selected</span>
            <span class="p">});</span>
            <span class="nf">setContent</span><span class="p">(</span><span class="nx">fileContent</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">File opened successfully!</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error opening file:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p>We use the <code class="language-plaintext highlighter-rouge">open</code> function to open a file selection dialog window to search for text files. This function (together with the <code class="language-plaintext highlighter-rouge">save</code> function) is provided by the <code class="language-plaintext highlighter-rouge">api</code> package which we import at the beginning of the <code class="language-plaintext highlighter-rouge">.jsx</code>-file with:</p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">open</span><span class="p">,</span> <span class="nx">save</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@tauri-apps/plugin-dialog</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>
<p>Next, we feed the selected file path to the <code class="language-plaintext highlighter-rouge">invoke</code> function which is used to call the <code class="language-plaintext highlighter-rouge">open_file</code> Rust function. To be able to use the <code class="language-plaintext highlighter-rouge">invoke</code> function, we need to import at the beginning of the file like this:</p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">invoke</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@tauri-apps/api/core</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="rust-functions">Rust Functions</h2>
<p>Using <code class="language-plaintext highlighter-rouge">invoke</code> we can call Rust<sup id="fnref:Rust" role="doc-noteref"><a href="#fn:Rust" class="footnote" rel="footnote">3</a></sup> functions from our JavaScript code. To do so, we need to declare the function in our <code class="language-plaintext highlighter-rouge">main.rs</code> file:</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[tauri::command]</span>
<span class="k">fn</span> <span class="nf">open_file</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="nb">String</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nn">fs</span><span class="p">::</span><span class="nf">read_to_string</span><span class="p">(</span><span class="nn">PathBuf</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>
        <span class="nf">.map_err</span><span class="p">(|</span><span class="n">e</span><span class="p">|</span> <span class="n">e</span><span class="nf">.to_string</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The first line <code class="language-plaintext highlighter-rouge">#[tauri::command]</code> is used to declare the function as a Tauri command. This is necessary for the <code class="language-plaintext highlighter-rouge">invoke</code> function to be able to call it from JavaScript. The function then takes the path of the directory as a <code class="language-plaintext highlighter-rouge">String</code> as an argument and returns a <code class="language-plaintext highlighter-rouge">Result&lt;String, String&gt;</code> which is a common Rust pattern for returning a value or an error.</p>

<p>For this, we import the <code class="language-plaintext highlighter-rouge">fs</code> module to be able to read the file content and the <code class="language-plaintext highlighter-rouge">PathBuf</code> struct to be able to handle the path as a <code class="language-plaintext highlighter-rouge">PathBuf</code> object.</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="n">fs</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">path</span><span class="p">::</span><span class="n">PathBuf</span><span class="p">;</span>
</code></pre></div></div>

<p>We then make sure that we can call the <code class="language-plaintext highlighter-rouge">open_file</code> (and <code class="language-plaintext highlighter-rouge">save_file</code>) function from JavaScript and initialize the dialog plugin by adding the following lines to the <code class="language-plaintext highlighter-rouge">build</code> function in the <code class="language-plaintext highlighter-rouge">main.rs</code> file:</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">.invoke_handler</span><span class="p">(</span><span class="nn">tauri</span><span class="p">::</span><span class="nd">generate_handler!</span><span class="p">[</span><span class="n">save_file</span><span class="p">,</span> <span class="n">open_file</span><span class="p">])</span>
<span class="nf">.plugin</span><span class="p">(</span><span class="nn">tauri_plugin_dialog</span><span class="p">::</span><span class="nf">init</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="configuration">Configuration</h2>
<p>Lastly, and importantly, we need to make sure that we list the capabilities we want to use in our <code class="language-plaintext highlighter-rouge">tauri.conf.json</code> file:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"security"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"csp"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"capabilities"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>We just need to add the empty <code class="language-plaintext highlighter-rouge">capabilities</code> list to the <code class="language-plaintext highlighter-rouge">security</code> section to get it to work. If you don’t include it, Tauri’s security model may restrict access to core APIs like file system operations. This is because the absence implies a configuration omission, and Tauri errs on the side of caution. This is meant to prevent malicious code from accessing your system through your application but also part of Tauri’s philosophy of being aware of what your application is doing specifically.</p>

<p>We also need to add</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"withGlobalTauri"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></code></pre></div></div>
<p>to actually enable global Tauri API access in the JavaScript code.</p>

<h2 id="conclusion">Conclusion</h2>
<p>With that, you should be able to open, edit, and save text files in your Tauri application.</p>

<p>One might compare this setup to how easy it is creating and modifying files using Python and wonder why we bother with Rust and all the hassle. But of course Python does not have the same security, it is absurdly slow, it is quite difficult to create beautiful and complex GUIs with Python which also easily compile into cross-platform executables.</p>

<p>So I hope this helped and if you have any questions or suggestions, feel free to leave a comment below. 😊</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Tauri2" role="doc-endnote">
      <p><a href="https://v2.tauri.app/start/">Tauri 2.0 Documentation</a> <a href="#fnref:Tauri2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:React" role="doc-endnote">
      <p><a href="https://react.dev/">React Documentation</a> <a href="#fnref:React" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Rust" role="doc-endnote">
      <p><a href="https://www.rust-lang.org/">Rust Documentation</a> <a href="#fnref:Rust" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Quentin Wach</name></author><category term="blog" /><category term="software" /><summary type="html"><![CDATA[If you are just getting started with Tauri 2.0, opening, modifying, and saving files can seem quite a bit tricky. If you choose to use Rust rather than using the API provided by Tauri and struggle to get it working, this post is for you. Let's make a simple text file editor.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/tauri_editor.png" /><media:content medium="image" url="http://localhost:4000/images/tauri_editor.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">OpenGL Shaders</title><link href="http://localhost:4000/blog/2024/09/18/first-shaders.html" rel="alternate" type="text/html" title="OpenGL Shaders" /><published>2024-09-18T21:38:24+02:00</published><updated>2024-09-18T21:38:24+02:00</updated><id>http://localhost:4000/blog/2024/09/18/first-shaders</id><content type="html" xml:base="http://localhost:4000/blog/2024/09/18/first-shaders.html"><![CDATA[<p>I recently started getting more into low-level programming, implementing physics simulations and graphics which then lead me to write my first shader. And damn… shaders are awesome! But many of the copy-cat tutorials out there are terribly boring. I don’t want to see another colored triangle! Let’s actually (attempt to) build an awesome shader! First, I’ll give a little introduction then I’ll show you two simple shaders I made with detailed comments in the code.</p>

<p>Two of the most amazing examples of scenes created with shaders, raw mathematics, were created by the great and famous Inigo Quilez<sup id="fnref:inigo_web" role="doc-noteref"><a href="#fn:inigo_web" class="footnote" rel="footnote">1</a></sup><sup id="fnref:Inigo_youtube" role="doc-noteref"><a href="#fn:Inigo_youtube" class="footnote" rel="footnote">2</a></sup>, who is also the creator of Shadertoy<sup id="fnref:Shadertoy" role="doc-noteref"><a href="#fn:Shadertoy" class="footnote" rel="footnote">3</a></sup> among many other things:</p>

<div style="display: flex; justify-content: space-between; gap: 0px; margin-bottom: 10px;">
    <img src="/images/i_1.png" style="width: 49%; border-radius: 5px;" />
    <img src="/images/i_2.png" style="width: 49%; border-radius: 5px;" />
</div>

<p>The left shows a beautiful mountain landscape with a forest under a sunny sky<sup id="fnref:shader1" role="doc-noteref"><a href="#fn:shader1" class="footnote" rel="footnote">4</a></sup>. The right shows a greek temple<sup id="fnref:shader2" role="doc-noteref"><a href="#fn:shader2" class="footnote" rel="footnote">5</a></sup>. Both are live-rendered shaders by Inigo Quilez, @iquilezles and iquilezles.org.</p>

<!--
<iframe width="100%" height="360" frameborder="0" src="https://www.shadertoy.com/embed/4ttSWf?gui=true&t=10&paused=true&muted=false" allowfullscreen></iframe>
<iframe width="100%" height="360" frameborder="0" src="https://www.shadertoy.com/embed/ldScDh?gui=true&t=10&paused=true&muted=false" allowfullscreen></iframe>
-->

<p>There are no sculpted or modelled objects in these scenes. Everything was defined and rendered using a complex composition of very simply equations. How?</p>

<h2 id="opengl-shaders-rendering-parallelism-on-the-gpu">OpenGL Shaders: Rendering Parallelism On the GPU</h2>
<p>OpenGL is probably the most common/known shader language and if you have any more technical questions you should definitely read through their website/documentation<sup id="fnref:OpenGL" role="doc-noteref"><a href="#fn:OpenGL" class="footnote" rel="footnote">6</a></sup>.</p>

<blockquote>
  <p>“A shader is a set of instructions to the GPU which are executed all at once for every pixel on the screen.”<sup id="fnref:TheHappyCat" role="doc-noteref"><a href="#fn:TheHappyCat" class="footnote" rel="footnote">7</a></sup></p>
</blockquote>

<p>The basic idea of shaders is simply to parallelize, to compute using all the available resources a GPU provides in parallel. That is typically graphics but it can frankly be whatever you want. Thus, a core idea is to keep dependencies as little as possible. The program should typically only be linear, deterministic. You have a simple input like the pixel position on the screen and the shader will know exactly what to do. This is what makes it parallelizable. The more it depends on what is going on at other positions on the screen or other data or even previous data, the less parallelizable it will be and the less we’ll be able to truly make use of the power of the GPU.</p>

<h2 id="drawing-objects-with-vertex-and-fragmentpixel-shaders">Drawing Objects with Vertex and Fragment/Pixel Shaders</h2>
<p>If we want to draw a object, we need to define the points that make the geometry of the object. That’s what the CPU does. (Sad.) We’ll then pass that input point information (vertices) to the GPU. The vertex shader then figures out where to draw these points on the screen. The fragment shader figures out what color each spot on the surface of the object should be<sup id="fnref:Barney" role="doc-noteref"><a href="#fn:Barney" class="footnote" rel="footnote">8</a></sup>.</p>

<p>Of course, there are many more shaders like geometry and compute shaders. But alas…
A faster way which can directly utilize the GPU is defining distance functions!</p>

<p>But I dislike reading and watching tutorial after tutorial. So let’s just get started!</p>

<h2 id="example-lava-lamp">Example: Lava Lamp</h2>
<p>My first own shader (aside from the typical color gradients one does which is pretty much the “hello world” of shaders) is an animation comparable to a lava lamp. Or maybe spraying blood. 😅
Here is the code:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifdef GL_ES
</span><span class="n">precision</span> <span class="n">mediump</span> <span class="kt">float</span><span class="p">;</span>
<span class="cp">#endif
</span>
<span class="n">uniform</span> <span class="n">vec2</span> <span class="n">u_resolution</span><span class="p">;</span>
<span class="n">uniform</span> <span class="kt">float</span> <span class="n">u_time</span><span class="p">;</span>
  
<span class="n">vec3</span> <span class="n">colorA</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mo">055</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">001</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">010</span><span class="p">);</span>
<span class="n">vec3</span> <span class="n">colorB</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mo">000</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">000</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">134</span><span class="p">);</span>
  
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mo">000</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">000</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">000</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">pct</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">u_time</span><span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Add a warped, animated circle</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">st</span> <span class="o">=</span> <span class="n">gl_FragCoord</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">u_resolution</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">center</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">252</span><span class="p">;</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Create warping effect</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">warpFactor</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">4</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">warpSpeed</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">warp</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">sin</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">10</span><span class="p">.</span><span class="mi">0</span> <span class="o">+</span> <span class="n">u_time</span> <span class="o">*</span> <span class="n">warpSpeed</span><span class="p">)</span> <span class="o">*</span> <span class="n">warpFactor</span><span class="p">,</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">cos</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="p">.</span><span class="mi">0</span> <span class="o">+</span> <span class="n">u_time</span> <span class="o">*</span> <span class="n">warpSpeed</span><span class="p">)</span> <span class="o">*</span> <span class="n">warpFactor</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Apply warping to the coordinates</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">st</span> <span class="o">+=</span> <span class="n">warp</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">distance</span><span class="p">(</span><span class="n">st</span><span class="p">,</span> <span class="n">center</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">circle</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">radius</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mo">005</span><span class="p">,</span> <span class="n">dist</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">pct</span> <span class="o">=</span> <span class="n">circle</span><span class="p">;</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Mix uses pct (a value from 0-1) to</span>
<span class="err"> </span> <span class="err"> </span> <span class="c1">// mix the two colors</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">color</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">colorA</span><span class="p">,</span> <span class="n">colorB</span><span class="p">,</span> <span class="n">pct</span><span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<style>
    img[alt=IMAGE2] {
        display: block;
        width: 50%;
        border-radius: 5px;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 0px;
        margin-top: 25px;
    }
    .image-container {
        position: relative;
        width: 100%;
        margin: 25px auto 0;
    }
    .image-blur {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        filter: blur(40px);
        opacity: 0.1;
        z-index: 1;
    }
    .image-main {
        position: relative;
        z-index: 2;
    }
</style>

<div class="image-container">
    <img src="/images/shader_1.png" alt="IMAGE2-blur" class="image-blur" />
    <img src="/images/shader_1.png" alt="IMAGE2" class="image-main" />
</div>

<div style="text-align: center; margin-bottom: 15px;">
    <span style="font-size: 14px;">
        My first shader, red drops moving from right to left, merging and splitting smoothly.
    </span>
</div>

<p>Okay. This was quite straightforward. So I wanted to attempt something similar like that landscape Inigo made! I pretty much hacked this together, there is a lot wrong with the following code but it does produce a somewhat pleasing result.</p>

<h2 id="example-mountain-range">Example: Mountain Range</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifdef GL_ES
</span><span class="n">precision</span> <span class="n">mediump</span> <span class="kt">float</span><span class="p">;</span>
<span class="cp">#endif
</span>
<span class="n">uniform</span> <span class="n">vec2</span> <span class="n">u_resolution</span><span class="p">;</span>
<span class="n">uniform</span> <span class="n">vec2</span> <span class="n">u_mouse</span><span class="p">;</span>
<span class="n">uniform</span> <span class="kt">float</span> <span class="n">u_time</span><span class="p">;</span>

<span class="c1">// Camera settings</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">FOV</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">NEAR</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">FAR</span> <span class="o">=</span> <span class="mi">10</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="c1">// Updated terrain settings</span>
<span class="k">const</span> <span class="n">vec3</span> <span class="n">TERRAIN_COLOR</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">339</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">600</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">194</span><span class="p">);</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">TERRAIN_HEIGHT</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">580</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">TERRAIN_SCALE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">244</span><span class="p">;</span>

<span class="c1">// Ray marching settings</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX_STEPS</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">MAX_DIST</span> <span class="o">=</span> <span class="mi">200</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">EPSILON</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mo">01</span><span class="p">;</span>

<span class="c1">// Noise settings</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">OCTAVES</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">PERSISTENCE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">99</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">LACUNARITY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">;</span>

<span class="c1">// Camera to world transformation</span>
<span class="n">mat3</span> <span class="nf">camera</span><span class="p">(</span><span class="n">vec3</span> <span class="n">cameraPos</span><span class="p">,</span> <span class="n">vec3</span> <span class="n">lookAtPos</span><span class="p">,</span> <span class="n">vec3</span> <span class="n">upVector</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">f</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">lookAtPos</span> <span class="o">-</span> <span class="n">cameraPos</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">r</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">cross</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">upVector</span><span class="p">));</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">u</span> <span class="o">=</span> <span class="n">cross</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">mat3</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="o">-</span><span class="n">f</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Improved noise function</span>
<span class="n">vec2</span> <span class="nf">hash2</span><span class="p">(</span><span class="n">vec2</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">p</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">700</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">580</span><span class="p">)),</span> <span class="n">dot</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">390</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">470</span><span class="p">)));</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">872</span> <span class="o">+</span> <span class="mi">1</span><span class="p">.</span><span class="mi">488</span> <span class="o">*</span> <span class="n">fract</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">*</span> <span class="mi">43758</span><span class="p">.</span><span class="mi">321</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">float</span> <span class="nf">noise</span><span class="p">(</span><span class="n">vec2</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">const</span> <span class="kt">float</span> <span class="n">K1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">342</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">const</span> <span class="kt">float</span> <span class="n">K2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">203</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">i</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">K1</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">a</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">i</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">K2</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">o</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">?</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">o</span> <span class="o">+</span> <span class="n">K2</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">+</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">K2</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">h</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">532</span> <span class="o">-</span> <span class="n">vec3</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">),</span> <span class="n">dot</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span> <span class="n">dot</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c</span><span class="p">)),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">n</span> <span class="o">=</span> <span class="n">h</span> <span class="o">*</span> <span class="n">h</span> <span class="o">*</span> <span class="n">h</span> <span class="o">*</span> <span class="n">h</span> <span class="o">*</span> <span class="n">vec3</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">hash2</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">)),</span> 
                                  <span class="n">dot</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">hash2</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">o</span><span class="p">)),</span> 
                                  <span class="n">dot</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">hash2</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">)));</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">dot</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">70</span><span class="p">.</span><span class="mi">0</span><span class="p">));</span>
<span class="p">}</span>


<span class="c1">// Updated fBm function</span>
<span class="kt">float</span> <span class="nf">fBm</span><span class="p">(</span><span class="n">vec2</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">value</span> <span class="o">=</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">360</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">amplitude</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">756</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">frequency</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">856</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">OCTAVES</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">value</span> <span class="o">+=</span> <span class="n">amplitude</span> <span class="o">*</span> <span class="n">noise</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span> <span class="n">frequency</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">amplitude</span> <span class="o">*=</span> <span class="n">PERSISTENCE</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">frequency</span> <span class="o">*=</span> <span class="n">LACUNARITY</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Updated terrain function using fBm</span>
<span class="kt">float</span> <span class="nf">terrain</span><span class="p">(</span><span class="n">vec3</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">fBm</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span> <span class="o">*</span> <span class="n">TERRAIN_HEIGHT</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Scene SDF</span>
<span class="kt">float</span> <span class="nf">sceneSDF</span><span class="p">(</span><span class="n">vec3</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">terrain</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Ray marching function</span>
<span class="kt">float</span> <span class="nf">rayMarch</span><span class="p">(</span><span class="n">vec3</span> <span class="n">ro</span><span class="p">,</span> <span class="n">vec3</span> <span class="n">rd</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_STEPS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">p</span> <span class="o">=</span> <span class="n">ro</span> <span class="o">+</span> <span class="n">rd</span> <span class="o">*</span> <span class="n">d</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">ds</span> <span class="o">=</span> <span class="n">sceneSDF</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">d</span> <span class="o">+=</span> <span class="n">ds</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="n">MAX_DIST</span> <span class="o">||</span> <span class="n">abs</span><span class="p">(</span><span class="n">ds</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">EPSILON</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Add these constants for fog</span>
<span class="k">const</span> <span class="n">vec3</span> <span class="n">FOG_COLOR</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">);</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">FOG_DENSITY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mo">0003</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">uv</span> <span class="o">=</span> <span class="p">(</span><span class="n">gl_FragCoord</span><span class="p">.</span><span class="n">xy</span> <span class="o">-</span> <span class="mi">1</span><span class="p">.</span><span class="mi">228</span> <span class="o">*</span> <span class="n">u_resolution</span><span class="p">.</span><span class="n">xy</span><span class="p">)</span> <span class="o">/</span> <span class="n">u_resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="c1">// Updated camera setup</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">cameraPos</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">12</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">lookAtPos</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">upVector</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">mat3</span> <span class="n">cam</span> <span class="o">=</span> <span class="n">camera</span><span class="p">(</span><span class="n">cameraPos</span><span class="p">,</span> <span class="n">lookAtPos</span><span class="p">,</span> <span class="n">upVector</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">rd</span> <span class="o">=</span> <span class="n">cam</span> <span class="o">*</span> <span class="n">normalize</span><span class="p">(</span><span class="n">vec3</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">FOV</span><span class="p">));</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Ray marching</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">d</span> <span class="o">=</span> <span class="n">rayMarch</span><span class="p">(</span><span class="n">cameraPos</span><span class="p">,</span> <span class="n">rd</span><span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Sky gradient</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">SKY_COLOR</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">306</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">616</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">965</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">horizon</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mo">060</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mo">052</span><span class="p">,</span> <span class="n">rd</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">skyGradient</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">FOG_COLOR</span><span class="p">,</span> <span class="n">SKY_COLOR</span><span class="p">,</span> <span class="n">horizon</span><span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Coloring</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="n">skyGradient</span><span class="p">;</span> <span class="c1">// Start with sky gradient</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&lt;</span> <span class="n">MAX_DIST</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">p</span> <span class="o">=</span> <span class="n">cameraPos</span> <span class="o">+</span> <span class="n">rd</span> <span class="o">*</span> <span class="n">d</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">height</span> <span class="o">=</span> <span class="n">fBm</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span> <span class="o">*</span> <span class="n">TERRAIN_HEIGHT</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> 
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="c1">// Color based on height</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">color</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">TERRAIN_COLOR</span><span class="p">,</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">),</span> 
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">smoothstep</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">TERRAIN_HEIGHT</span><span class="p">,</span> <span class="n">height</span><span class="p">));</span>

<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="c1">// Add simple shading</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">normal</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">vec3</span><span class="p">(</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">fBm</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">+</span> <span class="n">vec2</span><span class="p">(</span><span class="n">EPSILON</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">))</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span> 
            <span class="o">-</span> <span class="n">fBm</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">-</span> <span class="n">vec2</span><span class="p">(</span><span class="n">EPSILON</span><span class="p">,</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">264</span><span class="p">))</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">),</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="mi">1</span><span class="p">.</span><span class="mi">688</span> <span class="o">*</span> <span class="n">EPSILON</span><span class="p">,</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">fBm</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">+</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">EPSILON</span><span class="p">))</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span> 
            <span class="o">-</span> <span class="n">fBm</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">-</span> <span class="n">vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">216</span><span class="p">,</span> <span class="n">EPSILON</span><span class="p">))</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span>

<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="p">));</span>

<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">diffuse</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="n">normalize</span><span class="p">(</span><span class="n">vec3</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">))),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">color</span> <span class="o">*=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">220</span> <span class="o">+</span> <span class="mi">1</span><span class="p">.</span><span class="mo">076</span> <span class="o">*</span> <span class="n">diffuse</span><span class="p">;</span>

<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="c1">// Apply fog</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">fogFactor</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">-</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">FOG_DENSITY</span> <span class="o">*</span> <span class="n">d</span> <span class="o">*</span> <span class="n">d</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">color</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="n">skyGradient</span><span class="p">,</span> <span class="n">fogFactor</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">}</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Add debug grid</span>
<span class="err"> </span> <span class="err"> </span> <span class="c1">//vec2 grid = step(fract(uv * 10.0), vec2(0.080, 0.080));</span>
<span class="err"> </span> <span class="err"> </span> <span class="c1">//color = mix(color, vec3(1.000, 0.0, 0.411), max(grid.x, grid.y) * 0.332);</span>

<span class="err"> </span> <span class="err"> </span> <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<style>
    img[alt=IMAGE2] {
        display: block;
        width: 50%;
        border-radius: 5px;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 0px;
        margin-top: 25px;
    }
    .image-container {
        position: relative;
        width: 100%;
        margin: 25px auto 0;
    }
    .image-blur {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        filter: blur(40px);
        opacity: 0.1;
        z-index: 1;
    }
    .image-main {
        position: relative;
        z-index: 2;
    }
</style>

<div class="image-container">
    <img src="/images/shader_2.png" alt="IMAGE2-blur" class="image-blur" />
    <img src="/images/shader_2.png" alt="IMAGE2" class="image-main" />
</div>

<div style="text-align: center; margin-bottom: 15px;">
    <span style="font-size: 14px;">
    My second shader, a mountain range under a blue sky with a distance fog.
    </span>
</div>

<p>Alright!</p>

<p>Maybe this second shader looks long and intimidating. But if you go through it step by step, it’s not that complicated and almost looks like simple mathematics. I find that very appealing.</p>

<!--
$$
\text{color} = \begin{cases}
\text{mix}(\text{terrainColor}, \text{skyGradient}, f_{\text{fog}}) & \text{if } d < \text{MAX_DIST} \
\text{skyGradient} & \text{otherwise}
\end{cases}
$$

Where:

$$
\begin{align*}
\text{skyGradient} &= \text{mix}(\text{FOG_COLOR}, \text{SKY_COLOR}, h_{\text{horizon}}) \\
h_{\text{horizon}} &= \text{smoothstep}(-0.060, 0.052, \text{rd}y) \\
\text{terrainColor} &= (\text{baseColor} \cdot (0.220 + 1.076 \cdot d{\text{diffuse}})) \\

\text{baseColor} &= \text{mix}(\text{TERRAIN_COLOR}, \text{vec3}(1.0), s_{\text{height}}) \\
s_{\text{height}} &= \text{smoothstep}(0.0, \text{TERRAIN_HEIGHT}, h_{\text{fBm}}) \\
h_{\text{fBm}} &= \text{fBm}(p_{xz} \cdot \text{TERRAIN_SCALE}) \cdot \text{TERRAIN_HEIGHT} \\

d_{\text{diffuse}} &= \max(\text{dot}(\text{normal}, \text{normalize}(\text{vec3}(1.0, 1.0, -1.0))), 0.0) \\
f_{\text{fog}} &= 1.0 - e^{-\text{FOG_DENSITY} \cdot d^2}
\end{align*}

$$
-->

<p>If you want to test these yourself, I created the shaders above (which sadly aren’t animated here) using <a href="https://editor.thebookofshaders.com/">editor.thebookofshaders.com</a> which is very useful for testing shader code live. But if you want to run them locally, you can set up a local server and embed your shader in an html file. It’s boring and beyond the point here though.</p>

<p>I’ll experiment more with this and will try to create more complicated, artistically pleasing shaders in the future. But there is another thing I find quite interesting which somewhat blurs the lines between computing and rendering: compute shaders! (Allowing us to run certain simulations or general computations on the GPU similar to OpenCL but within the GPU’s graphics pipeline.)</p>

<p>But with that, I am happy for now. Onward.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:inigo_web" role="doc-endnote">
      <p><a href="https://iquilezles.org/articles/">Inigo Quilez’s website</a> <a href="#fnref:inigo_web" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Inigo_youtube" role="doc-endnote">
      <p><a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw">Inigo’s YouTube</a> <a href="#fnref:Inigo_youtube" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Shadertoy" role="doc-endnote">
      <p><a href="https://www.shadertoy.com/">Shadertoy</a> <a href="#fnref:Shadertoy" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:shader1" role="doc-endnote">
      <p><a href="https://www.shadertoy.com/view/4ttSWf">Shader #1 created by Inigo Quilez on Shadertoy: https://www.shadertoy.com/view/4ttSWf</a> <a href="#fnref:shader1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:shader2" role="doc-endnote">
      <p><a href="https://www.shadertoy.com/view/ldScDh">Shader #2 created by Inigo Quilez on Shadertoy: https://www.shadertoy.com/view/ldScDh</a> <a href="#fnref:shader2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:OpenGL" role="doc-endnote">
      <p><a href="https://www.khronos.org/opengl/wiki/Main_Page">OpenGL Website</a> <a href="#fnref:OpenGL" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:TheHappyCat" role="doc-endnote">
      <p><a href="https://www.youtube.com/watch?v=sXbdF4KjNOc">The Happy Cat’s What Are Shaders? https://www.youtube.com/watch?v=sXbdF4KjNOc</a> <a href="#fnref:TheHappyCat" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Barney" role="doc-endnote">
      <p><a href="https://www.youtube.com/watch?v=3mfvZ-mdtZQ">Barney Code’s Introduction to Shaders: Learn the Basics! https://www.youtube.com/watch?v=3mfvZ-mdtZQ</a> <a href="#fnref:Barney" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Quentin Wach</name></author><category term="blog" /><category term="computer graphics" /><summary type="html"><![CDATA[Explaining briefly what shaders are and then moving on to writing two simple ones in GLSL. The first one similar to a lava lamp and the second one a little mountain range under a blue sky with a distance fog. Turns out, shaders are like painting directly with mathematics.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/shader_2.png" /><media:content medium="image" url="http://localhost:4000/images/shader_2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Image Ranker: The Web App for Fast Ranking of Large Image Collections</title><link href="http://localhost:4000/science-engineering/2024/08/28/image-ranker.html" rel="alternate" type="text/html" title="Image Ranker: The Web App for Fast Ranking of Large Image Collections" /><published>2024-08-28T21:38:24+02:00</published><updated>2024-08-28T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/08/28/image-ranker</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/08/28/image-ranker.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="app" /><category term="machine learning" /><summary type="html"><![CDATA[Training generative image models requires a way to compare images and provide feedback on which images are better. I built a web app to do just that.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/imagerank3.png" /><media:content medium="image" url="http://localhost:4000/images/imagerank3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building a 16-Bit Computer: From NAND to Pong</title><link href="http://localhost:4000/2024/08/01/hack-comp.html" rel="alternate" type="text/html" title="Building a 16-Bit Computer: From NAND to Pong" /><published>2024-08-01T21:38:24+02:00</published><updated>2024-08-01T21:38:24+02:00</updated><id>http://localhost:4000/2024/08/01/hack-comp</id><content type="html" xml:base="http://localhost:4000/2024/08/01/hack-comp.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="python" /><category term="verilog" /><category term="gds" /><category term="integrated circuits" /><category term="computer" /><summary type="html"><![CDATA[Verilog implementation and detailed explanation of the Hack computer architecture with the help of Logisim, Icarus Verilog, and GTKWave. A .gds mask layout can be generated with the OpenLane 130 nm PDK.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/hack_computer.png" /><media:content medium="image" url="http://localhost:4000/images/hack_computer.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Webiny</title><link href="http://localhost:4000/2024/07/27/webiny.html" rel="alternate" type="text/html" title="Webiny" /><published>2024-07-27T21:38:24+02:00</published><updated>2024-07-27T21:38:24+02:00</updated><id>http://localhost:4000/2024/07/27/webiny</id><content type="html" xml:base="http://localhost:4000/2024/07/27/webiny.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="python" /><category term="internet" /><category term="application" /><summary type="html"><![CDATA[A minimal single-tab web browser written in Python without caching, cookies, chronic logins, etc. It only took 30 min to make but it's a nice little tool for when you want to focus and not get distracted while still having access to the internet.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/webiny.png" /><media:content medium="image" url="http://localhost:4000/images/webiny.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">IC3D: Render .gds Files in 3D</title><link href="http://localhost:4000/science-engineering/2024/07/23/IC3D.html" rel="alternate" type="text/html" title="IC3D: Render .gds Files in 3D" /><published>2024-07-23T21:38:24+02:00</published><updated>2024-07-23T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/07/23/IC3D</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/07/23/IC3D.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="gds" /><category term="integrated circuits" /><category term="photonics" /><summary type="html"><![CDATA[.gds to .gltf file conversion and workflow to create photo-real animations of your photonic/electronic integrated circuits. Compared to other scripts, this one takes into account complex nested cell structures, rotations, and flips as one typically encounters them in photonic integrated circuits.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/xyz3.png" /><media:content medium="image" url="http://localhost:4000/images/xyz3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TERRA: The Tiny Terrain Generator</title><link href="http://localhost:4000/science-engineering/2024/07/23/terra.html" rel="alternate" type="text/html" title="TERRA: The Tiny Terrain Generator" /><published>2024-07-23T21:38:24+02:00</published><updated>2024-07-23T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/07/23/terra</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/07/23/terra.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="physics" /><category term="computer graphics" /><summary type="html"><![CDATA[This Python package provides various physics simulations for hydraulic erosion, tectonic dynamics, weather patterns, biomes, geological primitives, tesselations, filters, and more to quickly generate highly realistic terrains.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/terra.png" /><media:content medium="image" url="http://localhost:4000/images/terra.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Sudoku: Generator and Solver</title><link href="http://localhost:4000/2024/06/22/Sudoku.html" rel="alternate" type="text/html" title="Sudoku: Generator and Solver" /><published>2024-06-22T21:38:24+02:00</published><updated>2024-06-22T21:38:24+02:00</updated><id>http://localhost:4000/2024/06/22/Sudoku</id><content type="html" xml:base="http://localhost:4000/2024/06/22/Sudoku.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="puzzle" /><category term="python" /><category term="AI" /><category term="game" /><summary type="html"><![CDATA[Generate Sudokus of any difficulty, generate beautiful images of them or just save them as .txt files, and solve them using a backtracking algorithm. I then ask: Can neurosymbolic AIs learn Sudoku, too?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/sudoku_head.png" /><media:content medium="image" url="http://localhost:4000/images/sudoku_head.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Field-Dependent THz Transport Nonlinearities in Semiconductor Nano Structures</title><link href="http://localhost:4000/science-engineering/academia/2024/04/22/second-publication.html" rel="alternate" type="text/html" title="Field-Dependent THz Transport Nonlinearities in Semiconductor Nano Structures" /><published>2024-04-22T21:38:24+02:00</published><updated>2024-04-22T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/academia/2024/04/22/second-publication</id><content type="html" xml:base="http://localhost:4000/science-engineering/academia/2024/04/22/second-publication.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="academia" /><category term="physics" /><category term="optics" /><category term="THz spectroscopy" /><category term="thesis" /><category term="density matrix" /><category term="quantum mechanics" /><category term="semiconductors" /><category term="nanoscience" /><summary type="html"><![CDATA[The charge transport in semiconductor quantum dots and nanorods is studied theoretically, predicting strong field-dependent nonlinear mobility effects and intra-pulse gain. We studied the temperature- and size-sensitive mobility spectra, crucial for applications like 6G tech and nano electronics in general.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/NS_Title_Graphic_Square_3.png" /><media:content medium="image" url="http://localhost:4000/images/NS_Title_Graphic_Square_3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>