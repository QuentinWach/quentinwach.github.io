<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-09-19T23:17:47+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Q. Wach</title><subtitle></subtitle><entry><title type="html">A First Taste of Shaders</title><link href="http://localhost:4000/personal/2024/09/18/first-shaders.html" rel="alternate" type="text/html" title="A First Taste of Shaders" /><published>2024-09-18T21:38:24+02:00</published><updated>2024-09-18T21:38:24+02:00</updated><id>http://localhost:4000/personal/2024/09/18/first-shaders</id><content type="html" xml:base="http://localhost:4000/personal/2024/09/18/first-shaders.html"><![CDATA[<p>I recently started getting more into low-level programming, implementing physics simulations and graphics which then lead me to write my first shader. And damn… shaders are awesome! But many of the copy-cat tutorials out there are terribly boring. I don’t want to see another colored triangle! Let’s actually (attempt to) build an awesome shader! First, I’ll give a little introduction then I’ll show you two simple shaders I made with detailed comments in the code.</p>

<p>Two of the most amazing examples of scenes created with shaders, raw mathematics, were created by the great and famous Inigo Quilez <sup id="fnref:inigo_web" role="doc-noteref"><a href="#fn:inigo_web" class="footnote" rel="footnote">1</a></sup> <sup id="fnref:Inigo_youtube" role="doc-noteref"><a href="#fn:Inigo_youtube" class="footnote" rel="footnote">2</a></sup>, who is also the creator of Shadertoy <sup id="fnref:Shadertoy" role="doc-noteref"><a href="#fn:Shadertoy" class="footnote" rel="footnote">3</a></sup> among many other things:</p>

<iframe width="100%" height="360" frameborder="0" src="https://www.shadertoy.com/embed/4ttSWf?gui=true&amp;t=10&amp;paused=true&amp;muted=false" allowfullscreen=""></iframe>
<iframe width="100%" height="360" frameborder="0" src="https://www.shadertoy.com/embed/ldScDh?gui=true&amp;t=10&amp;paused=true&amp;muted=false" allowfullscreen=""></iframe>
<p><em>By Inigo Quilez, @iquilezles and iquilezles.org.</em></p>

<p>There are no sculpted or modelled objects in these scenes. Everything was defined and rendered using a complex composition of very simply equations. How?</p>

<h3 id="opengl-shaders-rendering-parallelism-on-the-gpu">OpenGL Shaders: Rendering Parallelism On the GPU</h3>
<p>OpenGL is probably the most common/known shader language and if you have any more technical questions you should definitely read through their website/documentation <sup id="fnref:OpenGL" role="doc-noteref"><a href="#fn:OpenGL" class="footnote" rel="footnote">4</a></sup>.</p>

<blockquote>
  <p>“A shader is a set of instructions to the GPU which are executed all at once for every pixel on the screen.” <sup id="fnref:TheHappyCat" role="doc-noteref"><a href="#fn:TheHappyCat" class="footnote" rel="footnote">5</a></sup></p>
</blockquote>

<p>The basic idea of shaders is simply to parallelize, to compute using all the available resources a GPU provides in parallel. That is typically graphics but it can frankly be whatever you want. Thus, a core idea is to keep dependencies as little as possible. The program should typically only be linear, deterministic. You have a simple input like the pixel position on the screen and the shader will know exactly what to do. This is what makes it parallelizable. The more it depends on what is going on at other positions on the screen or other data or even previous data, the less parallelizable it will be and the less we’ll be able to truly make use of the power of the GPU.</p>

<h3 id="drawing-objects-with-vertex-and-fragmentpixel-shaders">Drawing Objects with Vertex and Fragment/Pixel Shaders</h3>
<p>If we want to draw a object, we need to define the points that make the geometry of the object. That’s what the CPU does. (Sad.) We’ll then pass that input point information (vertices) to the GPU. The vertex shader then figures out where to draw these points on the screen. The fragment shader figures out what color each spot on the surface of the object should be <sup id="fnref:Barney" role="doc-noteref"><a href="#fn:Barney" class="footnote" rel="footnote">6</a></sup>.</p>

<p>Of course, there are many more shaders like geometry and compute shaders. But alas…
A faster way which can directly utilize the GPU is defining distance functions!</p>

<p>But I dislike reading and watching tutorial after tutorial. So let’s just get started!</p>

<h3 id="example-1-lava-lamp">Example #1: Lava Lamp</h3>
<p>My first own shader (aside from the typical color gradients one does which is pretty much the “hello world” of shaders) is an animation comparable to a lava lamp. Or maybe spraying blood. 😅
Here is the code:</p>

<pre><code class="language-frag">#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform float u_time;
  
vec3 colorA = vec3(0.055,0.001,0.010);
vec3 colorB = vec3(1.000,0.000,0.134);
  
void main() {
    vec3 color = vec3(0.000,0.000,0.000);
    float pct = sin(u_time);

    // Add a warped, animated circle
    vec2 st = gl_FragCoord.xy / u_resolution.xy;
    vec2 center = vec2(0.5, 0.5);
    float radius = 0.252;

    // Create warping effect
    float warpFactor = 0.4;
    float warpSpeed = 2.0;

    vec2 warp = vec2(
        sin(st.y * 10.0 + u_time * warpSpeed) * warpFactor,
        cos(st.x * 10.0 + u_time * warpSpeed) * warpFactor
    );

    // Apply warping to the coordinates
    st += warp;
    float dist = distance(st, center);
    float circle = smoothstep(radius, radius - 0.005, dist);
    pct = circle;

    // Mix uses pct (a value from 0-1) to
    // mix the two colors
    color = mix(colorA, colorB, pct);

    gl_FragColor = vec4(color,1.0);
}
</code></pre>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/images/shader_1.png" alt="" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">My first shader, red drops moving from right to left, merging and splitting smoothly.</td>
    </tr>
  </tbody>
</table>

<p>Okay. This was quite straightforward. So I wanted to attempt something similar like that landscape Inigo made! I pretty much hacked this together, there is a lot wrong with the following code but it does produce a somewhat pleasing result.</p>

<h3 id="example-2-mountain-range">Example #2: Mountain Range</h3>

<pre><code class="language-frag">#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

// Camera settings
const float FOV = 1.0;
const float NEAR = 0.1;
const float FAR = 10.0;

// Updated terrain settings
const vec3 TERRAIN_COLOR = vec3(0.339,0.600,0.194);
const float TERRAIN_HEIGHT = 1.580;
const float TERRAIN_SCALE = 0.244;

// Ray marching settings
const int MAX_STEPS = 200;
const float MAX_DIST = 200.0;
const float EPSILON = 0.01;

// Noise settings
const int OCTAVES = 10;
const float PERSISTENCE = 0.99;
const float LACUNARITY = 0.5;

// Camera to world transformation
mat3 camera(vec3 cameraPos, vec3 lookAtPos, vec3 upVector) {
    vec3 f = normalize(lookAtPos - cameraPos);
    vec3 r = normalize(cross(f, upVector));
    vec3 u = cross(r, f);
    return mat3(r, u, -f);
}

// Improved noise function
vec2 hash2(vec2 p) {
    p = vec2(dot(p, vec2(0.700,0.580)), dot(p, vec2(0.390,0.470)));
    return -0.872 + 1.488 * fract(sin(p) * 43758.321);
}

float noise(vec2 p) {
    const float K1 = 0.342;
    const float K2 = 0.203;
    vec2 i = floor(p + (p.x + p.y) * K1);
    vec2 a = p - i + (i.x + i.y) * K2;
    vec2 o = (a.x &gt; a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0 * K2;
    vec3 h = max(0.532 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);
    vec3 n = h * h * h * h * vec3(dot(a, hash2(i + 0.0)), dot(b, hash2(i + o)), dot(c, hash2(i + 1.0)));
    return dot(n, vec3(70.0));
}

// Updated fBm function
float fBm(vec2 p) {
    float value = -0.360;
    float amplitude = 0.756;
    float frequency = 0.856;
    for (int i = 0; i &lt; OCTAVES; i++) {
        value += amplitude * noise(p * frequency);
        amplitude *= PERSISTENCE;
        frequency *= LACUNARITY;
    }
    return value;
}

// Updated terrain function using fBm
float terrain(vec3 p) {
    return p.y - fBm(p.xz * TERRAIN_SCALE) * TERRAIN_HEIGHT;
}

// Scene SDF
float sceneSDF(vec3 p) {
    return terrain(p);
}

// Ray marching function
float rayMarch(vec3 ro, vec3 rd) {
    float d = 0.0;
    for (int i = 0; i &lt; MAX_STEPS; i++) {
        vec3 p = ro + rd * d;
        float ds = sceneSDF(p);
        d += ds;
        if (d &gt; MAX_DIST || abs(ds) &lt; EPSILON) break;
    }
    return d;
}

// Add these constants for fog
const vec3 FOG_COLOR = vec3(0.6, 0.7, 0.8);
const float FOG_DENSITY = 0.0003;

void main() {
    vec2 uv = (gl_FragCoord.xy - 1.228 * u_resolution.xy) / u_resolution.y;
    // Updated camera setup
    vec3 cameraPos = vec3(0.0, 5.0, -12.0);
    vec3 lookAtPos = vec3(0.0, 0.0, 0.0);
    vec3 upVector = vec3(0.0, 1.0, 0.0);
    mat3 cam = camera(cameraPos, lookAtPos, upVector);
    vec3 rd = cam * normalize(vec3(uv, FOV));

    // Ray marching
    float d = rayMarch(cameraPos, rd);

    // Sky gradient
    vec3 SKY_COLOR = vec3(0.306, 0.616, 0.965);
    float horizon = smoothstep(-0.060, 0.052, rd.y);
    vec3 skyGradient = mix(FOG_COLOR, SKY_COLOR, horizon);

    // Coloring
    vec3 color = skyGradient; // Start with sky gradient
    if (d &lt; MAX_DIST) {
        vec3 p = cameraPos + rd * d;
        float height = fBm(p.xz * TERRAIN_SCALE) * TERRAIN_HEIGHT;
        
        // Color based on height
        color = mix(TERRAIN_COLOR, vec3(1.0), smoothstep(0.0, TERRAIN_HEIGHT, height));

        // Add simple shading
        vec3 normal = normalize(vec3(
            fBm((p.xz + vec2(EPSILON, 0.0)) * TERRAIN_SCALE) - fBm((p.xz - vec2(EPSILON, -0.264)) * TERRAIN_SCALE),
            1.688 * EPSILON,
            fBm((p.xz + vec2(0.0, EPSILON)) * TERRAIN_SCALE) - fBm((p.xz - vec2(-0.216, EPSILON)) * TERRAIN_SCALE)
        ));

        float diffuse = max(dot(normal, normalize(vec3(1.0, 1.0, -1.0))), 0.0);
        color *= 0.220 + 1.076 * diffuse;

        // Apply fog
        float fogFactor = 1.0 - exp(-FOG_DENSITY * d * d);
        color = mix(color, skyGradient, fogFactor);
    }

    // Add debug grid
    //vec2 grid = step(fract(uv * 10.0), vec2(0.080, 0.080));
    //color = mix(color, vec3(1.000, 0.0, 0.411), max(grid.x, grid.y) * 0.332);

    gl_FragColor = vec4(color, 1.0);
}
</code></pre>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/images/shader_2.png" alt="" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">My second shader, a mountain range under a blue sky with a distance fog.</td>
    </tr>
  </tbody>
</table>

<p>Alright!</p>

<p>Maybe this second shader looks long and intidimating. But if you go through it step by step, it’s not that complicated and almost looks like simple mathematics. I find that very appealing.</p>

<p>If you want to test these yourself, I created the shaders above (which sadly aren’t animated here) using <a href="https://editor.thebookofshaders.com/">editor.thebookofshaders.com</a> which is very useful for testing shader code live. But if you want to run them locally, you can set up a local server and embed your shader in an html file. It’s boring and beyond the point here though.</p>

<p>I’ll experiment more with this and will try to create more complicated artistic shaders in the future. But there is another thing I am quite interesting which somewhat blurs the lines between computing and rendering: computer shaders!</p>

<p>But with that, I am happy for now. Onward.</p>

<h3 id="references">References</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:inigo_web" role="doc-endnote">
      <p><a href="https://iquilezles.org/articles/">Inigo Quilez’s website</a> <a href="#fnref:inigo_web" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Inigo_youtube" role="doc-endnote">
      <p><a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw">Inigo’s YouTube</a> <a href="#fnref:Inigo_youtube" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Shadertoy" role="doc-endnote">
      <p><a href="https://www.shadertoy.com/">Shadertoy</a> <a href="#fnref:Shadertoy" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:OpenGL" role="doc-endnote">
      <p><a href="https://www.khronos.org/opengl/wiki/Main_Page">OpenGL Website</a> <a href="#fnref:OpenGL" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:TheHappyCat" role="doc-endnote">
      <p><a href="https://www.youtube.com/watch?v=sXbdF4KjNOc">The Happy Cat’s What Are Shaders? https://www.youtube.com/watch?v=sXbdF4KjNOc</a> <a href="#fnref:TheHappyCat" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Barney" role="doc-endnote">
      <p><a href="https://www.youtube.com/watch?v=3mfvZ-mdtZQ">Barney Code’s Introduction to Shaders: Learn the Basics! https://www.youtube.com/watch?v=3mfvZ-mdtZQ</a> <a href="#fnref:Barney" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Quentin Wach</name></author><category term="personal" /><category term="shaders" /><category term="computer graphics" /><summary type="html"><![CDATA[Where I finally got around to writing my first shaders, explaining briefly (very, very briefly) what they are and then moving on to writing two simple ones in GLSL. The first one similar to a lava lamp and the second one a little mountain range under a blue sky with a distance fog. Turns out, shaders are like painting directly with mathematics.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/shader_2.png" /><media:content medium="image" url="http://localhost:4000/images/shader_2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Image Ranker: A Web App for Pairwise Image Ranking</title><link href="http://localhost:4000/science-engineering/2024/08/28/image-ranker.html" rel="alternate" type="text/html" title="Image Ranker: A Web App for Pairwise Image Ranking" /><published>2024-08-28T21:38:24+02:00</published><updated>2024-08-28T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/08/28/image-ranker</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/08/28/image-ranker.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="app" /><category term="machine learning" /><summary type="html"><![CDATA[Training generative image models requires a way to compare images and provide feedback on which images are better. I built a web app to do just that.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/imagerank3.png" /><media:content medium="image" url="http://localhost:4000/images/imagerank3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building a 16-Bit Computer: From NAND to Pong</title><link href="http://localhost:4000/2024/08/01/hack-comp.html" rel="alternate" type="text/html" title="Building a 16-Bit Computer: From NAND to Pong" /><published>2024-08-01T21:38:24+02:00</published><updated>2024-08-01T21:38:24+02:00</updated><id>http://localhost:4000/2024/08/01/hack-comp</id><content type="html" xml:base="http://localhost:4000/2024/08/01/hack-comp.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="python" /><category term="verilog" /><category term="gds" /><category term="integrated circuits" /><category term="computer" /><summary type="html"><![CDATA[Verilog implementation and detailed explanation of the Hack computer architecture with the help of Logisim, Icarus Verilog, and GTKWave. A .gds mask layout can be generated with the OpenLane 130 nm PDK.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/hack_computer.png" /><media:content medium="image" url="http://localhost:4000/images/hack_computer.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Webiny</title><link href="http://localhost:4000/2024/07/27/webiny.html" rel="alternate" type="text/html" title="Webiny" /><published>2024-07-27T21:38:24+02:00</published><updated>2024-07-27T21:38:24+02:00</updated><id>http://localhost:4000/2024/07/27/webiny</id><content type="html" xml:base="http://localhost:4000/2024/07/27/webiny.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="python" /><category term="internet" /><category term="application" /><summary type="html"><![CDATA[A minimal single-tab web browser written in Python without caching, cookies, chronic logins, etc. It only took 30 min to make but it's a nice little tool for when you want to focus and not get distracted while still having access to the internet.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/webiny.png" /><media:content medium="image" url="http://localhost:4000/images/webiny.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TERRA: The Tiny Terrain Generator</title><link href="http://localhost:4000/science-engineering/2024/07/23/terra.html" rel="alternate" type="text/html" title="TERRA: The Tiny Terrain Generator" /><published>2024-07-23T21:38:24+02:00</published><updated>2024-07-23T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/07/23/terra</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/07/23/terra.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="physics" /><category term="computer graphics" /><summary type="html"><![CDATA[This Python package provides various physics simulations for hydraulic erosion, tectonic dynamics, weather patterns, biomes, geological primitives, tesselations, filters, and more to quickly generate highly realistic terrains.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/terra.png" /><media:content medium="image" url="http://localhost:4000/images/terra.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">IC3D: Render .gds Files in 3D</title><link href="http://localhost:4000/science-engineering/2024/07/23/IC3D.html" rel="alternate" type="text/html" title="IC3D: Render .gds Files in 3D" /><published>2024-07-23T21:38:24+02:00</published><updated>2024-07-23T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/07/23/IC3D</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/07/23/IC3D.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="gds" /><category term="integrated circuits" /><category term="photonics" /><summary type="html"><![CDATA[.gds to .gltf file conversion and workflow to create photo-real animations of your photonic/electronic integrated circuits. Compared to other scripts, this one takes into account complex nested cell structures, rotations, and flips as one typically encounters them in photonic integrated circuits.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/xyz3.png" /><media:content medium="image" url="http://localhost:4000/images/xyz3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to Computational Fluid Dynamics</title><link href="http://localhost:4000/science-engineering/2024/07/23/fluids-intro.html" rel="alternate" type="text/html" title="Introduction to Computational Fluid Dynamics" /><published>2024-07-23T21:38:24+02:00</published><updated>2024-07-23T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/07/23/fluids-intro</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/07/23/fluids-intro.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="physics" /><category term="game" /><category term="fluid-dynamics" /><summary type="html"><![CDATA[Where we will discuss the Navier-Stokes equations and then break down the problem with the presence of solid objects implementing a simple real-time solver in Python.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/ink_fluid_comp.gif" /><media:content medium="image" url="http://localhost:4000/images/ink_fluid_comp.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Sudoku: Generator and Solver</title><link href="http://localhost:4000/2024/06/22/Sudoku.html" rel="alternate" type="text/html" title="Sudoku: Generator and Solver" /><published>2024-06-22T21:38:24+02:00</published><updated>2024-06-22T21:38:24+02:00</updated><id>http://localhost:4000/2024/06/22/Sudoku</id><content type="html" xml:base="http://localhost:4000/2024/06/22/Sudoku.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="puzzle" /><category term="python" /><category term="AI" /><category term="game" /><summary type="html"><![CDATA[Generate Sudokus of any difficulty, generate beautiful images of them or just save them as .txt files, and solve them using a backtracking algorithm. I then ask: Can neurosymbolic AIs learn Sudoku, too?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/sudoku_head.png" /><media:content medium="image" url="http://localhost:4000/images/sudoku_head.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Field-Dependent THz Transport Nonlinearities in Semiconductor Nano Structures</title><link href="http://localhost:4000/science-engineering/academia/2024/04/22/second-publication.html" rel="alternate" type="text/html" title="Field-Dependent THz Transport Nonlinearities in Semiconductor Nano Structures" /><published>2024-04-22T21:38:24+02:00</published><updated>2024-04-22T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/academia/2024/04/22/second-publication</id><content type="html" xml:base="http://localhost:4000/science-engineering/academia/2024/04/22/second-publication.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="academia" /><category term="physics" /><category term="optics" /><category term="THz spectroscopy" /><category term="thesis" /><category term="density matrix" /><category term="quantum mechanics" /><category term="semiconductors" /><category term="nanoscience" /><summary type="html"><![CDATA[The charge transport in semiconductor quantum dots and nanorods is studied theoretically, predicting strong field-dependent nonlinear mobility effects and intra-pulse gain. We studied the temperature- and size-sensitive mobility spectra, crucial for applications like 6G tech and nano electronics in general.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/NS_Title_Graphic_Square_3.png" /><media:content medium="image" url="http://localhost:4000/images/NS_Title_Graphic_Square_3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Augmenting Obsidian.md with AI</title><link href="http://localhost:4000/science-engineering/2024/04/16/AI-obsidian.html" rel="alternate" type="text/html" title="Augmenting Obsidian.md with AI" /><published>2024-04-16T00:00:00+02:00</published><updated>2024-04-16T00:00:00+02:00</updated><id>http://localhost:4000/science-engineering/2024/04/16/AI-obsidian</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/04/16/AI-obsidian.html"><![CDATA[]]></content><author><name>[&quot;Quentin Wach&quot;]</name></author><category term="science-engineering" /><category term="python" /><category term="obsidian" /><category term="productivity" /><category term="AI" /><summary type="html"><![CDATA[A simple Python script to quickly organize your markdown notes in Obsidian.md using OpenAI's large language models. Any random, untagged, empty, or unlinked notes? No more. This little script will fill the gaps, connect what belongs together, and even create high level organizing nodes if a specific topic has a lot of notes. It also provides additional meta-information and visualizations.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/obsidian-AI/1x1_image.png" /><media:content medium="image" url="http://localhost:4000/images/obsidian-AI/1x1_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>