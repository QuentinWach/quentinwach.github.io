<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-12T01:52:51+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Q. Wach</title><subtitle></subtitle><entry><title type="html">OpenGL Shaders</title><link href="http://localhost:4000/blog/2024/09/18/first-shaders.html" rel="alternate" type="text/html" title="OpenGL Shaders" /><published>2024-09-18T21:38:24+02:00</published><updated>2024-09-18T21:38:24+02:00</updated><id>http://localhost:4000/blog/2024/09/18/first-shaders</id><content type="html" xml:base="http://localhost:4000/blog/2024/09/18/first-shaders.html"><![CDATA[<p>I recently started getting more into low-level programming, implementing physics simulations and graphics which then lead me to write my first shader. And damn… shaders are awesome! But many of the copy-cat tutorials out there are terribly boring. I don’t want to see another colored triangle! Let’s actually (attempt to) build an awesome shader! First, I’ll give a little introduction then I’ll show you two simple shaders I made with detailed comments in the code.</p>

<p>Two of the most amazing examples of scenes created with shaders, raw mathematics, were created by the great and famous Inigo Quilez<sup id="fnref:inigo_web" role="doc-noteref"><a href="#fn:inigo_web" class="footnote" rel="footnote">1</a></sup><sup id="fnref:Inigo_youtube" role="doc-noteref"><a href="#fn:Inigo_youtube" class="footnote" rel="footnote">2</a></sup>, who is also the creator of Shadertoy<sup id="fnref:Shadertoy" role="doc-noteref"><a href="#fn:Shadertoy" class="footnote" rel="footnote">3</a></sup> among many other things:</p>

<div style="display: flex; justify-content: space-between; gap: 0px; margin-bottom: 10px;">
    <img src="/images/i_1.png" style="width: 49%; border-radius: 5px;" />
    <img src="/images/i_2.png" style="width: 49%; border-radius: 5px;" />
</div>

<p>The left shows a beautiful mountain landscape with a forest under a sunny sky<sup id="fnref:shader1" role="doc-noteref"><a href="#fn:shader1" class="footnote" rel="footnote">4</a></sup>. The right shows a greek temple<sup id="fnref:shader2" role="doc-noteref"><a href="#fn:shader2" class="footnote" rel="footnote">5</a></sup>. Both are live-rendered shaders by Inigo Quilez, @iquilezles and iquilezles.org.</p>

<!--
<iframe width="100%" height="360" frameborder="0" src="https://www.shadertoy.com/embed/4ttSWf?gui=true&t=10&paused=true&muted=false" allowfullscreen></iframe>
<iframe width="100%" height="360" frameborder="0" src="https://www.shadertoy.com/embed/ldScDh?gui=true&t=10&paused=true&muted=false" allowfullscreen></iframe>
-->

<p>There are no sculpted or modelled objects in these scenes. Everything was defined and rendered using a complex composition of very simply equations. How?</p>

<h2 id="opengl-shaders-rendering-parallelism-on-the-gpu">OpenGL Shaders: Rendering Parallelism On the GPU</h2>
<p>OpenGL is probably the most common/known shader language and if you have any more technical questions you should definitely read through their website/documentation<sup id="fnref:OpenGL" role="doc-noteref"><a href="#fn:OpenGL" class="footnote" rel="footnote">6</a></sup>.</p>

<blockquote>
  <p>“A shader is a set of instructions to the GPU which are executed all at once for every pixel on the screen.”<sup id="fnref:TheHappyCat" role="doc-noteref"><a href="#fn:TheHappyCat" class="footnote" rel="footnote">7</a></sup></p>
</blockquote>

<p>The basic idea of shaders is simply to parallelize, to compute using all the available resources a GPU provides in parallel. That is typically graphics but it can frankly be whatever you want. Thus, a core idea is to keep dependencies as little as possible. The program should typically only be linear, deterministic. You have a simple input like the pixel position on the screen and the shader will know exactly what to do. This is what makes it parallelizable. The more it depends on what is going on at other positions on the screen or other data or even previous data, the less parallelizable it will be and the less we’ll be able to truly make use of the power of the GPU.</p>

<h2 id="drawing-objects-with-vertex-and-fragmentpixel-shaders">Drawing Objects with Vertex and Fragment/Pixel Shaders</h2>
<p>If we want to draw a object, we need to define the points that make the geometry of the object. That’s what the CPU does. (Sad.) We’ll then pass that input point information (vertices) to the GPU. The vertex shader then figures out where to draw these points on the screen. The fragment shader figures out what color each spot on the surface of the object should be<sup id="fnref:Barney" role="doc-noteref"><a href="#fn:Barney" class="footnote" rel="footnote">8</a></sup>.</p>

<p>Of course, there are many more shaders like geometry and compute shaders. But alas…
A faster way which can directly utilize the GPU is defining distance functions!</p>

<p>But I dislike reading and watching tutorial after tutorial. So let’s just get started!</p>

<h2 id="example-1-lava-lamp">Example #1: Lava Lamp</h2>
<p>My first own shader (aside from the typical color gradients one does which is pretty much the “hello world” of shaders) is an animation comparable to a lava lamp. Or maybe spraying blood. 😅
Here is the code:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifdef GL_ES
</span><span class="n">precision</span> <span class="n">mediump</span> <span class="kt">float</span><span class="p">;</span>
<span class="cp">#endif
</span>
<span class="n">uniform</span> <span class="n">vec2</span> <span class="n">u_resolution</span><span class="p">;</span>
<span class="n">uniform</span> <span class="kt">float</span> <span class="n">u_time</span><span class="p">;</span>
  
<span class="n">vec3</span> <span class="n">colorA</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mo">055</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">001</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">010</span><span class="p">);</span>
<span class="n">vec3</span> <span class="n">colorB</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mo">000</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">000</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">134</span><span class="p">);</span>
  
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mo">000</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">000</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mo">000</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">pct</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">u_time</span><span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Add a warped, animated circle</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">st</span> <span class="o">=</span> <span class="n">gl_FragCoord</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">u_resolution</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">center</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">252</span><span class="p">;</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Create warping effect</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">warpFactor</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">4</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">warpSpeed</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">warp</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">sin</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">10</span><span class="p">.</span><span class="mi">0</span> <span class="o">+</span> <span class="n">u_time</span> <span class="o">*</span> <span class="n">warpSpeed</span><span class="p">)</span> <span class="o">*</span> <span class="n">warpFactor</span><span class="p">,</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">cos</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="p">.</span><span class="mi">0</span> <span class="o">+</span> <span class="n">u_time</span> <span class="o">*</span> <span class="n">warpSpeed</span><span class="p">)</span> <span class="o">*</span> <span class="n">warpFactor</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Apply warping to the coordinates</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">st</span> <span class="o">+=</span> <span class="n">warp</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">distance</span><span class="p">(</span><span class="n">st</span><span class="p">,</span> <span class="n">center</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">circle</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">radius</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mo">005</span><span class="p">,</span> <span class="n">dist</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">pct</span> <span class="o">=</span> <span class="n">circle</span><span class="p">;</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Mix uses pct (a value from 0-1) to</span>
<span class="err"> </span> <span class="err"> </span> <span class="c1">// mix the two colors</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">color</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">colorA</span><span class="p">,</span> <span class="n">colorB</span><span class="p">,</span> <span class="n">pct</span><span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<style>
    img[alt=IMAGE2] {
        display: block;
        width: 50%;
        border-radius: 5px;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 0px;
        margin-top: 25px;
    }
    .image-container {
        position: relative;
        width: 100%;
        margin: 25px auto 0;
    }
    .image-blur {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        filter: blur(40px);
        opacity: 0.1;
        z-index: 1;
    }
    .image-main {
        position: relative;
        z-index: 2;
    }
</style>

<div class="image-container">
    <img src="/images/shader_1.png" alt="IMAGE2-blur" class="image-blur" />
    <img src="/images/shader_1.png" alt="IMAGE2" class="image-main" />
</div>

<div style="text-align: center; margin-bottom: 15px;">
    <span style="font-size: 14px;">
        My first shader, red drops moving from right to left, merging and splitting smoothly.
    </span>
</div>

<p>Okay. This was quite straightforward. So I wanted to attempt something similar like that landscape Inigo made! I pretty much hacked this together, there is a lot wrong with the following code but it does produce a somewhat pleasing result.</p>

<h2 id="example-2-mountain-range">Example #2: Mountain Range</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifdef GL_ES
</span><span class="n">precision</span> <span class="n">mediump</span> <span class="kt">float</span><span class="p">;</span>
<span class="cp">#endif
</span>
<span class="n">uniform</span> <span class="n">vec2</span> <span class="n">u_resolution</span><span class="p">;</span>
<span class="n">uniform</span> <span class="n">vec2</span> <span class="n">u_mouse</span><span class="p">;</span>
<span class="n">uniform</span> <span class="kt">float</span> <span class="n">u_time</span><span class="p">;</span>

<span class="c1">// Camera settings</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">FOV</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">NEAR</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">FAR</span> <span class="o">=</span> <span class="mi">10</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="c1">// Updated terrain settings</span>
<span class="k">const</span> <span class="n">vec3</span> <span class="n">TERRAIN_COLOR</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">339</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">600</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">194</span><span class="p">);</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">TERRAIN_HEIGHT</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">580</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">TERRAIN_SCALE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">244</span><span class="p">;</span>

<span class="c1">// Ray marching settings</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX_STEPS</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">MAX_DIST</span> <span class="o">=</span> <span class="mi">200</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">EPSILON</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mo">01</span><span class="p">;</span>

<span class="c1">// Noise settings</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">OCTAVES</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">PERSISTENCE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">99</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">LACUNARITY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">;</span>

<span class="c1">// Camera to world transformation</span>
<span class="n">mat3</span> <span class="nf">camera</span><span class="p">(</span><span class="n">vec3</span> <span class="n">cameraPos</span><span class="p">,</span> <span class="n">vec3</span> <span class="n">lookAtPos</span><span class="p">,</span> <span class="n">vec3</span> <span class="n">upVector</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">f</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">lookAtPos</span> <span class="o">-</span> <span class="n">cameraPos</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">r</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">cross</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">upVector</span><span class="p">));</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">u</span> <span class="o">=</span> <span class="n">cross</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">mat3</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="o">-</span><span class="n">f</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Improved noise function</span>
<span class="n">vec2</span> <span class="nf">hash2</span><span class="p">(</span><span class="n">vec2</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">p</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">700</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">580</span><span class="p">)),</span> <span class="n">dot</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">390</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">470</span><span class="p">)));</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">872</span> <span class="o">+</span> <span class="mi">1</span><span class="p">.</span><span class="mi">488</span> <span class="o">*</span> <span class="n">fract</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">*</span> <span class="mi">43758</span><span class="p">.</span><span class="mi">321</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">float</span> <span class="nf">noise</span><span class="p">(</span><span class="n">vec2</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">const</span> <span class="kt">float</span> <span class="n">K1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">342</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">const</span> <span class="kt">float</span> <span class="n">K2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">203</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">i</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">K1</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">a</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">i</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">K2</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">o</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">?</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">o</span> <span class="o">+</span> <span class="n">K2</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">+</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">K2</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">h</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">532</span> <span class="o">-</span> <span class="n">vec3</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">),</span> <span class="n">dot</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span> <span class="n">dot</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c</span><span class="p">)),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">n</span> <span class="o">=</span> <span class="n">h</span> <span class="o">*</span> <span class="n">h</span> <span class="o">*</span> <span class="n">h</span> <span class="o">*</span> <span class="n">h</span> <span class="o">*</span> <span class="n">vec3</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">hash2</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">)),</span> 
                                  <span class="n">dot</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">hash2</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">o</span><span class="p">)),</span> 
                                  <span class="n">dot</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">hash2</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">)));</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">dot</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">70</span><span class="p">.</span><span class="mi">0</span><span class="p">));</span>
<span class="p">}</span>


<span class="c1">// Updated fBm function</span>
<span class="kt">float</span> <span class="nf">fBm</span><span class="p">(</span><span class="n">vec2</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">value</span> <span class="o">=</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">360</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">amplitude</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">756</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">frequency</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">856</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">OCTAVES</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">value</span> <span class="o">+=</span> <span class="n">amplitude</span> <span class="o">*</span> <span class="n">noise</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span> <span class="n">frequency</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">amplitude</span> <span class="o">*=</span> <span class="n">PERSISTENCE</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">frequency</span> <span class="o">*=</span> <span class="n">LACUNARITY</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Updated terrain function using fBm</span>
<span class="kt">float</span> <span class="nf">terrain</span><span class="p">(</span><span class="n">vec3</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">fBm</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span> <span class="o">*</span> <span class="n">TERRAIN_HEIGHT</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Scene SDF</span>
<span class="kt">float</span> <span class="nf">sceneSDF</span><span class="p">(</span><span class="n">vec3</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">terrain</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Ray marching function</span>
<span class="kt">float</span> <span class="nf">rayMarch</span><span class="p">(</span><span class="n">vec3</span> <span class="n">ro</span><span class="p">,</span> <span class="n">vec3</span> <span class="n">rd</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_STEPS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">p</span> <span class="o">=</span> <span class="n">ro</span> <span class="o">+</span> <span class="n">rd</span> <span class="o">*</span> <span class="n">d</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">ds</span> <span class="o">=</span> <span class="n">sceneSDF</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">d</span> <span class="o">+=</span> <span class="n">ds</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="n">MAX_DIST</span> <span class="o">||</span> <span class="n">abs</span><span class="p">(</span><span class="n">ds</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">EPSILON</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Add these constants for fog</span>
<span class="k">const</span> <span class="n">vec3</span> <span class="n">FOG_COLOR</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">);</span>
<span class="k">const</span> <span class="kt">float</span> <span class="n">FOG_DENSITY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mo">0003</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec2</span> <span class="n">uv</span> <span class="o">=</span> <span class="p">(</span><span class="n">gl_FragCoord</span><span class="p">.</span><span class="n">xy</span> <span class="o">-</span> <span class="mi">1</span><span class="p">.</span><span class="mi">228</span> <span class="o">*</span> <span class="n">u_resolution</span><span class="p">.</span><span class="n">xy</span><span class="p">)</span> <span class="o">/</span> <span class="n">u_resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="c1">// Updated camera setup</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">cameraPos</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">12</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">lookAtPos</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">upVector</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">mat3</span> <span class="n">cam</span> <span class="o">=</span> <span class="n">camera</span><span class="p">(</span><span class="n">cameraPos</span><span class="p">,</span> <span class="n">lookAtPos</span><span class="p">,</span> <span class="n">upVector</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">rd</span> <span class="o">=</span> <span class="n">cam</span> <span class="o">*</span> <span class="n">normalize</span><span class="p">(</span><span class="n">vec3</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">FOV</span><span class="p">));</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Ray marching</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">d</span> <span class="o">=</span> <span class="n">rayMarch</span><span class="p">(</span><span class="n">cameraPos</span><span class="p">,</span> <span class="n">rd</span><span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Sky gradient</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">SKY_COLOR</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">306</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">616</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">965</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">horizon</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mo">060</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mo">052</span><span class="p">,</span> <span class="n">rd</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">skyGradient</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">FOG_COLOR</span><span class="p">,</span> <span class="n">SKY_COLOR</span><span class="p">,</span> <span class="n">horizon</span><span class="p">);</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Coloring</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="n">skyGradient</span><span class="p">;</span> <span class="c1">// Start with sky gradient</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&lt;</span> <span class="n">MAX_DIST</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">p</span> <span class="o">=</span> <span class="n">cameraPos</span> <span class="o">+</span> <span class="n">rd</span> <span class="o">*</span> <span class="n">d</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">height</span> <span class="o">=</span> <span class="n">fBm</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span> <span class="o">*</span> <span class="n">TERRAIN_HEIGHT</span><span class="p">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> 
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="c1">// Color based on height</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">color</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">TERRAIN_COLOR</span><span class="p">,</span> <span class="n">vec3</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">),</span> 
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">smoothstep</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">TERRAIN_HEIGHT</span><span class="p">,</span> <span class="n">height</span><span class="p">));</span>

<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="c1">// Add simple shading</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">vec3</span> <span class="n">normal</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">vec3</span><span class="p">(</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">fBm</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">+</span> <span class="n">vec2</span><span class="p">(</span><span class="n">EPSILON</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">))</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span> 
            <span class="o">-</span> <span class="n">fBm</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">-</span> <span class="n">vec2</span><span class="p">(</span><span class="n">EPSILON</span><span class="p">,</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">264</span><span class="p">))</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">),</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="mi">1</span><span class="p">.</span><span class="mi">688</span> <span class="o">*</span> <span class="n">EPSILON</span><span class="p">,</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">fBm</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">+</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">EPSILON</span><span class="p">))</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span> 
            <span class="o">-</span> <span class="n">fBm</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span> <span class="o">-</span> <span class="n">vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">216</span><span class="p">,</span> <span class="n">EPSILON</span><span class="p">))</span> <span class="o">*</span> <span class="n">TERRAIN_SCALE</span><span class="p">)</span>

<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="p">));</span>

<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">diffuse</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="n">normalize</span><span class="p">(</span><span class="n">vec3</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">))),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">color</span> <span class="o">*=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">220</span> <span class="o">+</span> <span class="mi">1</span><span class="p">.</span><span class="mo">076</span> <span class="o">*</span> <span class="n">diffuse</span><span class="p">;</span>

<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="c1">// Apply fog</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">float</span> <span class="n">fogFactor</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">-</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">FOG_DENSITY</span> <span class="o">*</span> <span class="n">d</span> <span class="o">*</span> <span class="n">d</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">color</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="n">skyGradient</span><span class="p">,</span> <span class="n">fogFactor</span><span class="p">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">}</span>

<span class="err"> </span> <span class="err"> </span> <span class="c1">// Add debug grid</span>
<span class="err"> </span> <span class="err"> </span> <span class="c1">//vec2 grid = step(fract(uv * 10.0), vec2(0.080, 0.080));</span>
<span class="err"> </span> <span class="err"> </span> <span class="c1">//color = mix(color, vec3(1.000, 0.0, 0.411), max(grid.x, grid.y) * 0.332);</span>

<span class="err"> </span> <span class="err"> </span> <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<style>
    img[alt=IMAGE2] {
        display: block;
        width: 50%;
        border-radius: 5px;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 0px;
        margin-top: 25px;
    }
    .image-container {
        position: relative;
        width: 100%;
        margin: 25px auto 0;
    }
    .image-blur {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        filter: blur(40px);
        opacity: 0.1;
        z-index: 1;
    }
    .image-main {
        position: relative;
        z-index: 2;
    }
</style>

<div class="image-container">
    <img src="/images/shader_2.png" alt="IMAGE2-blur" class="image-blur" />
    <img src="/images/shader_2.png" alt="IMAGE2" class="image-main" />
</div>

<div style="text-align: center; margin-bottom: 15px;">
    <span style="font-size: 14px;">
    My second shader, a mountain range under a blue sky with a distance fog.
    </span>
</div>

<p>Alright!</p>

<p>Maybe this second shader looks long and intimidating. But if you go through it step by step, it’s not that complicated and almost looks like simple mathematics. I find that very appealing.</p>

<!--
$$
\text{color} = \begin{cases}
\text{mix}(\text{terrainColor}, \text{skyGradient}, f_{\text{fog}}) & \text{if } d < \text{MAX_DIST} \
\text{skyGradient} & \text{otherwise}
\end{cases}
$$

Where:

$$
\begin{align*}
\text{skyGradient} &= \text{mix}(\text{FOG_COLOR}, \text{SKY_COLOR}, h_{\text{horizon}}) \\
h_{\text{horizon}} &= \text{smoothstep}(-0.060, 0.052, \text{rd}y) \\
\text{terrainColor} &= (\text{baseColor} \cdot (0.220 + 1.076 \cdot d{\text{diffuse}})) \\

\text{baseColor} &= \text{mix}(\text{TERRAIN_COLOR}, \text{vec3}(1.0), s_{\text{height}}) \\
s_{\text{height}} &= \text{smoothstep}(0.0, \text{TERRAIN_HEIGHT}, h_{\text{fBm}}) \\
h_{\text{fBm}} &= \text{fBm}(p_{xz} \cdot \text{TERRAIN_SCALE}) \cdot \text{TERRAIN_HEIGHT} \\

d_{\text{diffuse}} &= \max(\text{dot}(\text{normal}, \text{normalize}(\text{vec3}(1.0, 1.0, -1.0))), 0.0) \\
f_{\text{fog}} &= 1.0 - e^{-\text{FOG_DENSITY} \cdot d^2}
\end{align*}

$$
-->

<p>If you want to test these yourself, I created the shaders above (which sadly aren’t animated here) using <a href="https://editor.thebookofshaders.com/">editor.thebookofshaders.com</a> which is very useful for testing shader code live. But if you want to run them locally, you can set up a local server and embed your shader in an html file. It’s boring and beyond the point here though.</p>

<p>I’ll experiment more with this and will try to create more complicated, artistically pleasing shaders in the future. But there is another thing I find quite interesting which somewhat blurs the lines between computing and rendering: compute shaders! (Allowing us to run certain simulations or general computations on the GPU similar to OpenCL but within the GPU’s graphics pipeline.)</p>

<p>But with that, I am happy for now. Onward.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:inigo_web" role="doc-endnote">
      <p><a href="https://iquilezles.org/articles/">Inigo Quilez’s website</a> <a href="#fnref:inigo_web" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Inigo_youtube" role="doc-endnote">
      <p><a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw">Inigo’s YouTube</a> <a href="#fnref:Inigo_youtube" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Shadertoy" role="doc-endnote">
      <p><a href="https://www.shadertoy.com/">Shadertoy</a> <a href="#fnref:Shadertoy" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:shader1" role="doc-endnote">
      <p><a href="https://www.shadertoy.com/view/4ttSWf">Shader #1 created by Inigo Quilez on Shadertoy: https://www.shadertoy.com/view/4ttSWf</a> <a href="#fnref:shader1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:shader2" role="doc-endnote">
      <p><a href="https://www.shadertoy.com/view/ldScDh">Shader #2 created by Inigo Quilez on Shadertoy: https://www.shadertoy.com/view/ldScDh</a> <a href="#fnref:shader2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:OpenGL" role="doc-endnote">
      <p><a href="https://www.khronos.org/opengl/wiki/Main_Page">OpenGL Website</a> <a href="#fnref:OpenGL" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:TheHappyCat" role="doc-endnote">
      <p><a href="https://www.youtube.com/watch?v=sXbdF4KjNOc">The Happy Cat’s What Are Shaders? https://www.youtube.com/watch?v=sXbdF4KjNOc</a> <a href="#fnref:TheHappyCat" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Barney" role="doc-endnote">
      <p><a href="https://www.youtube.com/watch?v=3mfvZ-mdtZQ">Barney Code’s Introduction to Shaders: Learn the Basics! https://www.youtube.com/watch?v=3mfvZ-mdtZQ</a> <a href="#fnref:Barney" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Quentin Wach</name></author><category term="blog" /><category term="computer graphics" /><summary type="html"><![CDATA[Explaining briefly what shaders are and then moving on to writing two simple ones in GLSL. The first one similar to a lava lamp and the second one a little mountain range under a blue sky with a distance fog. Turns out, shaders are like painting directly with mathematics.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/shader_2.png" /><media:content medium="image" url="http://localhost:4000/images/shader_2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Image Ranker: The Web App for Fast Ranking of Large Image Collections</title><link href="http://localhost:4000/science-engineering/2024/08/28/image-ranker.html" rel="alternate" type="text/html" title="Image Ranker: The Web App for Fast Ranking of Large Image Collections" /><published>2024-08-28T21:38:24+02:00</published><updated>2024-08-28T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/08/28/image-ranker</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/08/28/image-ranker.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="app" /><category term="machine learning" /><summary type="html"><![CDATA[Training generative image models requires a way to compare images and provide feedback on which images are better. I built a web app to do just that.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/imagerank3.png" /><media:content medium="image" url="http://localhost:4000/images/imagerank3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building a 16-Bit Computer: From NAND to Pong</title><link href="http://localhost:4000/2024/08/01/hack-comp.html" rel="alternate" type="text/html" title="Building a 16-Bit Computer: From NAND to Pong" /><published>2024-08-01T21:38:24+02:00</published><updated>2024-08-01T21:38:24+02:00</updated><id>http://localhost:4000/2024/08/01/hack-comp</id><content type="html" xml:base="http://localhost:4000/2024/08/01/hack-comp.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="python" /><category term="verilog" /><category term="gds" /><category term="integrated circuits" /><category term="computer" /><summary type="html"><![CDATA[Verilog implementation and detailed explanation of the Hack computer architecture with the help of Logisim, Icarus Verilog, and GTKWave. A .gds mask layout can be generated with the OpenLane 130 nm PDK.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/hack_computer.png" /><media:content medium="image" url="http://localhost:4000/images/hack_computer.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Webiny</title><link href="http://localhost:4000/2024/07/27/webiny.html" rel="alternate" type="text/html" title="Webiny" /><published>2024-07-27T21:38:24+02:00</published><updated>2024-07-27T21:38:24+02:00</updated><id>http://localhost:4000/2024/07/27/webiny</id><content type="html" xml:base="http://localhost:4000/2024/07/27/webiny.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="python" /><category term="internet" /><category term="application" /><summary type="html"><![CDATA[A minimal single-tab web browser written in Python without caching, cookies, chronic logins, etc. It only took 30 min to make but it's a nice little tool for when you want to focus and not get distracted while still having access to the internet.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/webiny.png" /><media:content medium="image" url="http://localhost:4000/images/webiny.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TERRA: The Tiny Terrain Generator</title><link href="http://localhost:4000/science-engineering/2024/07/23/terra.html" rel="alternate" type="text/html" title="TERRA: The Tiny Terrain Generator" /><published>2024-07-23T21:38:24+02:00</published><updated>2024-07-23T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/07/23/terra</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/07/23/terra.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="physics" /><category term="computer graphics" /><summary type="html"><![CDATA[This Python package provides various physics simulations for hydraulic erosion, tectonic dynamics, weather patterns, biomes, geological primitives, tesselations, filters, and more to quickly generate highly realistic terrains.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/terra.png" /><media:content medium="image" url="http://localhost:4000/images/terra.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">IC3D: Render .gds Files in 3D</title><link href="http://localhost:4000/science-engineering/2024/07/23/IC3D.html" rel="alternate" type="text/html" title="IC3D: Render .gds Files in 3D" /><published>2024-07-23T21:38:24+02:00</published><updated>2024-07-23T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/07/23/IC3D</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/07/23/IC3D.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="gds" /><category term="integrated circuits" /><category term="photonics" /><summary type="html"><![CDATA[.gds to .gltf file conversion and workflow to create photo-real animations of your photonic/electronic integrated circuits. Compared to other scripts, this one takes into account complex nested cell structures, rotations, and flips as one typically encounters them in photonic integrated circuits.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/xyz3.png" /><media:content medium="image" url="http://localhost:4000/images/xyz3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to Computational Fluid Dynamics</title><link href="http://localhost:4000/science-engineering/2024/07/23/fluids-intro.html" rel="alternate" type="text/html" title="Introduction to Computational Fluid Dynamics" /><published>2024-07-23T21:38:24+02:00</published><updated>2024-07-23T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/2024/07/23/fluids-intro</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/07/23/fluids-intro.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="python" /><category term="physics" /><category term="game" /><category term="fluid-dynamics" /><summary type="html"><![CDATA[Where we will discuss the Navier-Stokes equations and then break down the problem with the presence of solid objects implementing a simple real-time solver in Python.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/ink_fluid_comp.gif" /><media:content medium="image" url="http://localhost:4000/images/ink_fluid_comp.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Sudoku: Generator and Solver</title><link href="http://localhost:4000/2024/06/22/Sudoku.html" rel="alternate" type="text/html" title="Sudoku: Generator and Solver" /><published>2024-06-22T21:38:24+02:00</published><updated>2024-06-22T21:38:24+02:00</updated><id>http://localhost:4000/2024/06/22/Sudoku</id><content type="html" xml:base="http://localhost:4000/2024/06/22/Sudoku.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="puzzle" /><category term="python" /><category term="AI" /><category term="game" /><summary type="html"><![CDATA[Generate Sudokus of any difficulty, generate beautiful images of them or just save them as .txt files, and solve them using a backtracking algorithm. I then ask: Can neurosymbolic AIs learn Sudoku, too?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/sudoku_head.png" /><media:content medium="image" url="http://localhost:4000/images/sudoku_head.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Field-Dependent THz Transport Nonlinearities in Semiconductor Nano Structures</title><link href="http://localhost:4000/science-engineering/academia/2024/04/22/second-publication.html" rel="alternate" type="text/html" title="Field-Dependent THz Transport Nonlinearities in Semiconductor Nano Structures" /><published>2024-04-22T21:38:24+02:00</published><updated>2024-04-22T21:38:24+02:00</updated><id>http://localhost:4000/science-engineering/academia/2024/04/22/second-publication</id><content type="html" xml:base="http://localhost:4000/science-engineering/academia/2024/04/22/second-publication.html"><![CDATA[]]></content><author><name>Quentin Wach</name></author><category term="science-engineering" /><category term="academia" /><category term="physics" /><category term="optics" /><category term="THz spectroscopy" /><category term="thesis" /><category term="density matrix" /><category term="quantum mechanics" /><category term="semiconductors" /><category term="nanoscience" /><summary type="html"><![CDATA[The charge transport in semiconductor quantum dots and nanorods is studied theoretically, predicting strong field-dependent nonlinear mobility effects and intra-pulse gain. We studied the temperature- and size-sensitive mobility spectra, crucial for applications like 6G tech and nano electronics in general.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/NS_Title_Graphic_Square_3.png" /><media:content medium="image" url="http://localhost:4000/images/NS_Title_Graphic_Square_3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Augmenting Obsidian.md with AI</title><link href="http://localhost:4000/science-engineering/2024/04/16/AI-obsidian.html" rel="alternate" type="text/html" title="Augmenting Obsidian.md with AI" /><published>2024-04-16T00:00:00+02:00</published><updated>2024-04-16T00:00:00+02:00</updated><id>http://localhost:4000/science-engineering/2024/04/16/AI-obsidian</id><content type="html" xml:base="http://localhost:4000/science-engineering/2024/04/16/AI-obsidian.html"><![CDATA[]]></content><author><name>[&quot;Quentin Wach&quot;]</name></author><category term="science-engineering" /><category term="python" /><category term="obsidian" /><category term="productivity" /><category term="AI" /><summary type="html"><![CDATA[A simple Python script to quickly organize your markdown notes in Obsidian.md using OpenAI's large language models. Any random, untagged, empty, or unlinked notes? No more. This little script will fill the gaps, connect what belongs together, and even create high level organizing nodes if a specific topic has a lot of notes. It also provides additional meta-information and visualizations.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/obsidian-AI/1x1_image.png" /><media:content medium="image" url="http://localhost:4000/images/obsidian-AI/1x1_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>